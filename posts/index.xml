<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on ∞</title>
    <link>https://h3x311.github.io/posts/</link>
    <description>Recent content in Posts on ∞</description>
    <image>
      <url>https://h3x311.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://h3x311.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 16 May 2022 17:22:07 +0800</lastBuildDate><atom:link href="https://h3x311.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Devops</title>
      <link>https://h3x311.github.io/posts/devops/</link>
      <pubDate>Mon, 16 May 2022 17:22:07 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/devops/</guid>
      <description>def 为什么有devops，有了之后，有哪些改变？ devops的基本流程是什么 devops的推荐工具是什么 细说基本流程如何自动化 devops的关键问题是什么 </description>
    </item>
    
    <item>
      <title>Cs61b</title>
      <link>https://h3x311.github.io/posts/cs61b/</link>
      <pubDate>Sat, 14 May 2022 21:22:33 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/cs61b/</guid>
      <description>1st day 看了篇用python实现的各种基础数据结构，写的很好，试着以后写笔记有一个goal。而不是copy feelings。
卡在markdown本地图片上传，本地笔记会分享上来的，未来的某一天。
1st  变量类型必须有，且不可改变，在运行前verify     A func is called a method  define func &amp;ndash;&amp;gt; public staic func&amp;rsquo;s parameters and return value must declared type Only one return val    2nd  没有main的method可以在有main的method里被调用      3rd list  link 两个list  ptr是指针    4th list  a = b时，发生了什么？  箭头指在相同的内存空间    this  &amp;ldquo;this&amp;rdquo; because it is a java keyword and it always refers to the current object.</description>
    </item>
    
    <item>
      <title>What happens when you type a URL and press enter?</title>
      <link>https://h3x311.github.io/posts/urlthen/</link>
      <pubDate>Tue, 29 Mar 2022 11:10:49 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/urlthen/</guid>
      <description>Make a Http Request &amp;ndash;&amp;gt; use curl client 向 server 发送request request head first line of request, Http1.1 &amp;ndash;&amp;gt; All plain text Why Http good?   client - server model
  plain text
  add headers value key for more extend
  stateless for independent   可靠reliability
  status code 206 - range of requests succeed
rediect_3 client_4 I would never request.404
server_5 You can request again.</description>
    </item>
    
    <item>
      <title>Process VS Thread</title>
      <link>https://h3x311.github.io/posts/processvsthread/</link>
      <pubDate>Mon, 28 Mar 2022 15:03:28 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/processvsthread/</guid>
      <description>Defination program有很多process，pcb是个虚拟的process容器，process可以creat child process。
process有很多thread，thread的三个状态:running，ready，block。
Process  An executing instance of a program is called a process.
   Seprate Process Control Block, Stack and Address Space.
 process之间很难相互影响    many process to one program
  disappear after reboot
  ps, multiprocess system can excute processes parallelly
  Thread  A thread is a subset of the process.
   share Data, Code, Heap, no stack</description>
    </item>
    
    <item>
      <title>Post VS Get</title>
      <link>https://h3x311.github.io/posts/postvsget/</link>
      <pubDate>Mon, 28 Mar 2022 11:59:17 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/postvsget/</guid>
      <description>defination HTTP request
区别 get   参数在url(长度有限)
  &amp;lsquo;GET&amp;rsquo; is limited to 2048 characters     require data from server
  POST   参数在body
  安全性更好
  update data to webserver
  总结 在面试中很常见的问题，网文写的都不太全。
so和ytb上的解释，区别是：1. 长度和参数位置不同。2. 安全性。不安全的内容用post。
理解区别最好的方式是举例子。
REF when-do-you-use-post-and-when-do-you-use-get
What is the difference between POST and GET? [duplicate]</description>
    </item>
    
    <item>
      <title>Codewars</title>
      <link>https://h3x311.github.io/posts/codewars/</link>
      <pubDate>Thu, 24 Mar 2022 16:01:26 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/codewars/</guid>
      <description>1st day open and solve 1 js question</description>
    </item>
    
    <item>
      <title>Cs自学资料</title>
      <link>https://h3x311.github.io/posts/cs%E8%87%AA%E5%AD%A6%E8%B5%84%E6%96%99/</link>
      <pubDate>Thu, 17 Mar 2022 16:38:39 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/cs%E8%87%AA%E5%AD%A6%E8%B5%84%E6%96%99/</guid>
      <description>很全面的从0到1的资源  覆盖面很广。细节很多。看完意识到自己很多都不懂。
Newbie 指南  工具性质的导引。适合零基础小白。
bli公开课  太全了。当作索引可以，但不会主动看。
site all in one  list很多。但不一定好。面试的那一栏内容不错。
blog  不知有没有喜欢看的。这种信息犹如大海捞针。
cs自学wiki  公开课的汇总及分类。需要了解新领域时，参考下。
original cs teach by yourself  比较简洁靠谱。没有繁复的。
reddit-wiki  视频比较多，比较实用。闲着无聊可以点点开，说不定会找到好的。
ask  如何提问。精简的表达需求。
last but important A Self-Learning, Modern Computer Science Curriculum burnout how to relax</description>
    </item>
    
    <item>
      <title>Lc</title>
      <link>https://h3x311.github.io/posts/lc/</link>
      <pubDate>Sat, 05 Mar 2022 20:55:13 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/lc/</guid>
      <description>1st day Download the table, and close now. 2nd day read some article of LC, have more info about blind75.
Think about starting tommorrow.
3rd day Do 2 array questions, learn to use hashmap.
4th day Do 2 link list questions, learn to use draw pic to code.
5th day Do 2 array, all uses cache, so called dp.
Find the repeat things, and store them in a cache.
6th day Read disc, know some pattern or definition of solution, but it wastes much time.</description>
    </item>
    
    <item>
      <title>10h制作游戏失败</title>
      <link>https://h3x311.github.io/posts/gameinoneday/</link>
      <pubDate>Mon, 28 Feb 2022 12:46:36 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/gameinoneday/</guid>
      <description> 看过一些游戏制作的书，玩过很多游戏。并不代表对游戏制作和理解游戏有多少经验。 做之前翻了youtube的&amp;quot;make game in one day&amp;quot;&amp;ldquo;unity&amp;rdquo;,reddit的gamedev，还有游戏引擎选择的讨论。 索性没看太多engine教程。直接拿最热门的unity使用。 解构游戏很简单，对于新手来说，难在使用工具。 重点是找很多simple basic的游戏来remake， 而不是你最爱玩的。 重点是了解engine的基础使用。 不要做tetris，做点平台类的横版过关就很好。 最后以刚开始分析的tetris结尾。
 </description>
    </item>
    
    <item>
      <title>Toolist</title>
      <link>https://h3x311.github.io/posts/toolist/</link>
      <pubDate>Sat, 26 Feb 2022 23:51:01 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/toolist/</guid>
      <description>工具分三类。一类是快捷键，一类是软件，一类是脚本。编辑器不再提。emacs我不会用，vim我用的不熟，vscode反而舒服。
Hotkey 作为一个还算爱键盘的人。hotkey和cheatsheet是我比较爱折腾的俩东西。
过去用的比较多的是spacelaucher来启动软件和网页。屏幕管理用的是触发角。
为什么转移平铺？减少了切换和关闭的工作，连接了窗口管理和软件，消灭了冲突。
每当开始用新editor，最先找的就是cheatsheet。
hotkey主要分布在3个地方：
 browser(我用surfing key的原因是类vim，Tridacity功能更多，等无聊再研究TODO  close this, before, after move this, before, after F   editor(nvim vscode  vim宏代替vscode快捷键 撤销 TODO vim键该列一张自己的扩展表   terminal(cli  move word 前后 del word   software  obsidian  hotkey未设置 search panel and template 加入   logseq  估计是和vim统一     窗口管理  yabai 和 skhd(skhd config有bug，待解决TODO   系统快捷键和上方冲突  整体统一TODO   hotkey连接脚本 TODO  Software 作为一个对新软件忍不住找来安装体验的人，试过很多，坚持下来的不过5个。:/</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://h3x311.github.io/posts/hugo/</link>
      <pubDate>Fri, 25 Feb 2022 20:09:26 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/hugo/</guid>
      <description>为什么用Hugo 相比hexo，hugo的功能和ui更现代化。hugo没有npm，安装很方便。 gatsby也不错。
建站中的问题  选theme直接找推荐，不要看list，选更新最近的并且热度高的 添加disqus写的域名应该是xx.github.io del submodule的最后一步 git rm --cached theme位置  hexcell  对称 无限 来自爱玩的游戏 hexcell  写什么  技术类总结 比如搞定某个workflow, 比如搞定某个技术问题, 比如瞎写学习总结  </description>
    </item>
    
    <item>
      <title>Git多用户</title>
      <link>https://h3x311.github.io/posts/git/</link>
      <pubDate>Tue, 22 Feb 2022 14:26:09 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/git/</guid>
      <description>需求  git用户和repo分离 多ssh key登陆  Q1 git config --local user.name &amp;#34;xxx&amp;#34; git config --local user.email &amp;#34;xxx&amp;#34; 修改当前项目下的git用户前提是添加多用户ssh key到～/.ssh/config
Q2 1. 生成key ssh-keygen -t rsa -C &amp;#34;user2@email.com&amp;#34; 名字加后缀，不要覆盖之前的key
2. 添加key到ssh agent中 ssh-agent bash ssh-add ~/.ssh/keyname 3. 修改ssh的config Host github-user2 HostName github.com User git Host 名称随意 当添加remote repo时，Host 替换：
git remote add origin git@github-user2:repoUrl 而不是
git remote add origin git@github.com:repoUrl  git clone 如是  总结 这样就可以愉快的使用多账号提交代码了！</description>
    </item>
    
    
  </channel>
</rss>
