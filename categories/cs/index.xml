<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cs on ∞</title>
    <link>https://h3x311.github.io/categories/cs/</link>
    <description>Recent content in cs on ∞</description>
    <image>
      <url>https://h3x311.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://h3x311.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 29 Mar 2022 11:10:49 +0800</lastBuildDate><atom:link href="https://h3x311.github.io/categories/cs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What happens when you type a URL and press enter?</title>
      <link>https://h3x311.github.io/posts/urlthen/</link>
      <pubDate>Tue, 29 Mar 2022 11:10:49 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/urlthen/</guid>
      <description>Make a Http Request &amp;ndash;&amp;gt; use curl client 向 server 发送request request head first line of request, Http1.1 &amp;ndash;&amp;gt; All plain text Why Http good?   client - server model
  plain text
  add headers value key for more extend
  stateless for independent   可靠reliability
  status code 206 - range of requests succeed
rediect_3 client_4 I would never request.404
server_5 You can request again.</description>
    </item>
    
    <item>
      <title>Process VS Thread</title>
      <link>https://h3x311.github.io/posts/processvsthread/</link>
      <pubDate>Mon, 28 Mar 2022 15:03:28 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/processvsthread/</guid>
      <description>Defination program有很多process，pcb是个虚拟的process容器，process可以creat child process。
process有很多thread，thread的三个状态:running，ready，block。
Process  An executing instance of a program is called a process.
   Seprate Process Control Block, Stack and Address Space.
 process之间很难相互影响    many process to one program
  disappear after reboot
  ps, multiprocess system can excute processes parallelly
  Thread  A thread is a subset of the process.
   share Data, Code, Heap, no stack</description>
    </item>
    
    <item>
      <title>Post VS Get</title>
      <link>https://h3x311.github.io/posts/postvsget/</link>
      <pubDate>Mon, 28 Mar 2022 11:59:17 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/postvsget/</guid>
      <description>defination HTTP request
区别 get   参数在url(长度有限)
  &amp;lsquo;GET&amp;rsquo; is limited to 2048 characters     require data from server
  POST   参数在body
  安全性更好
  update data to webserver
  总结 在面试中很常见的问题，网文写的都不太全。
so和ytb上的解释，区别是：1. 长度和参数位置不同。2. 安全性。不安全的内容用post。
理解区别最好的方式是举例子。
REF when-do-you-use-post-and-when-do-you-use-get
What is the difference between POST and GET? [duplicate]</description>
    </item>
    
    <item>
      <title>Cs自学资料</title>
      <link>https://h3x311.github.io/posts/cs%E8%87%AA%E5%AD%A6%E8%B5%84%E6%96%99/</link>
      <pubDate>Thu, 17 Mar 2022 16:38:39 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/cs%E8%87%AA%E5%AD%A6%E8%B5%84%E6%96%99/</guid>
      <description> 很全面的从0到1的资源  覆盖面很广。细节很多。看完意识到自己很多都不懂。
Newbie 指南  工具性质的导引。适合零基础小白。
bli公开课  太全了。当作索引可以，但不会主动看。
site all in one  list很多。但不一定好。面试的那一栏内容不错。
blog  不知有没有喜欢看的。这种信息犹如大海捞针。
cs自学wiki  公开课的汇总及分类。需要了解新领域时，参考下。
original cs teach by yourself  比较简洁靠谱。没有繁复的。
reddit-wiki  视频比较多，比较实用。闲着无聊可以点点开，说不定会找到好的。
ask  如何提问。精简的表达需求。
last but important A Self-Learning, Modern Computer Science Curriculum burnout how to relax </description>
    </item>
    
    <item>
      <title>Lc</title>
      <link>https://h3x311.github.io/posts/lc/</link>
      <pubDate>Sat, 05 Mar 2022 20:55:13 +0800</pubDate>
      
      <guid>https://h3x311.github.io/posts/lc/</guid>
      <description>1st day Download the table, and close now. 2nd day read some article of LC, have more info about blind75.
Think about starting tommorrow.
3rd day Do 2 array questions, learn to use hashmap.
4th day Do 2 link list questions, learn to use draw pic to code.
5th day Do 2 array, all uses cache, so called dp.
Find the repeat things, and store them in a cache.
6th day Read disc, know some pattern or definition of solution, but it wastes much time.</description>
    </item>
    
  </channel>
</rss>
